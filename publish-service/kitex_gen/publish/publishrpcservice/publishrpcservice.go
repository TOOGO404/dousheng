// Code generated by Kitex v0.7.0. DO NOT EDIT.

package publishrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	publish "publish-service/kitex_gen/publish"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishRpcServiceServiceInfo
}

var publishRpcServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishRpcService"
	handlerType := (*publish.PublishRpcService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishAction":  kitex.NewMethodInfo(publishActionHandler, newPublishRpcServicePublishActionArgs, newPublishRpcServicePublishActionResult, false),
		"GetPublishLish": kitex.NewMethodInfo(getPublishLishHandler, newPublishRpcServiceGetPublishLishArgs, newPublishRpcServiceGetPublishLishResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "publish",
		"ServiceFilePath": "../idl/publish.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishRpcServicePublishActionArgs)
	realResult := result.(*publish.PublishRpcServicePublishActionResult)
	success, err := handler.(publish.PublishRpcService).PublishAction(ctx, realArg.Data)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishRpcServicePublishActionArgs() interface{} {
	return publish.NewPublishRpcServicePublishActionArgs()
}

func newPublishRpcServicePublishActionResult() interface{} {
	return publish.NewPublishRpcServicePublishActionResult()
}

func getPublishLishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishRpcServiceGetPublishLishArgs)
	realResult := result.(*publish.PublishRpcServiceGetPublishLishResult)
	success, err := handler.(publish.PublishRpcService).GetPublishLish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishRpcServiceGetPublishLishArgs() interface{} {
	return publish.NewPublishRpcServiceGetPublishLishArgs()
}

func newPublishRpcServiceGetPublishLishResult() interface{} {
	return publish.NewPublishRpcServiceGetPublishLishResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishAction(ctx context.Context, data *publish.VideoData) (r *publish.PublishActionResp, err error) {
	var _args publish.PublishRpcServicePublishActionArgs
	_args.Data = data
	var _result publish.PublishRpcServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishLish(ctx context.Context, req *publish.PublishListReq) (r *publish.PublishListResp, err error) {
	var _args publish.PublishRpcServiceGetPublishLishArgs
	_args.Req = req
	var _result publish.PublishRpcServiceGetPublishLishResult
	if err = p.c.Call(ctx, "GetPublishLish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
