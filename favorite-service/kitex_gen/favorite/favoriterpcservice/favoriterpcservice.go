// Code generated by Kitex v0.7.0. DO NOT EDIT.

package favoriterpcservice

import (
	"context"
	favorite "favorite-service/kitex_gen/favorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteRpcServiceServiceInfo
}

var favoriteRpcServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteRpcService"
	handlerType := (*favorite.FavoriteRpcService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction":    kitex.NewMethodInfo(favoriteActionHandler, newFavoriteRpcServiceFavoriteActionArgs, newFavoriteRpcServiceFavoriteActionResult, false),
		"GetFavoriteList":   kitex.NewMethodInfo(getFavoriteListHandler, newFavoriteRpcServiceGetFavoriteListArgs, newFavoriteRpcServiceGetFavoriteListResult, false),
		"GetTotalFavorited": kitex.NewMethodInfo(getTotalFavoritedHandler, newFavoriteRpcServiceGetTotalFavoritedArgs, newFavoriteRpcServiceGetTotalFavoritedResult, false),
		"IsFavorited":       kitex.NewMethodInfo(isFavoritedHandler, newFavoriteRpcServiceIsFavoritedArgs, newFavoriteRpcServiceIsFavoritedResult, false),
		"GetFavorCount":     kitex.NewMethodInfo(getFavorCountHandler, newFavoriteRpcServiceGetFavorCountArgs, newFavoriteRpcServiceGetFavorCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "favorite",
		"ServiceFilePath": "../idl/favorite.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteRpcServiceFavoriteActionArgs)
	realResult := result.(*favorite.FavoriteRpcServiceFavoriteActionResult)
	success, err := handler.(favorite.FavoriteRpcService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteRpcServiceFavoriteActionArgs() interface{} {
	return favorite.NewFavoriteRpcServiceFavoriteActionArgs()
}

func newFavoriteRpcServiceFavoriteActionResult() interface{} {
	return favorite.NewFavoriteRpcServiceFavoriteActionResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteRpcServiceGetFavoriteListArgs)
	realResult := result.(*favorite.FavoriteRpcServiceGetFavoriteListResult)
	success, err := handler.(favorite.FavoriteRpcService).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteRpcServiceGetFavoriteListArgs() interface{} {
	return favorite.NewFavoriteRpcServiceGetFavoriteListArgs()
}

func newFavoriteRpcServiceGetFavoriteListResult() interface{} {
	return favorite.NewFavoriteRpcServiceGetFavoriteListResult()
}

func getTotalFavoritedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteRpcServiceGetTotalFavoritedArgs)
	realResult := result.(*favorite.FavoriteRpcServiceGetTotalFavoritedResult)
	success, err := handler.(favorite.FavoriteRpcService).GetTotalFavorited(ctx, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newFavoriteRpcServiceGetTotalFavoritedArgs() interface{} {
	return favorite.NewFavoriteRpcServiceGetTotalFavoritedArgs()
}

func newFavoriteRpcServiceGetTotalFavoritedResult() interface{} {
	return favorite.NewFavoriteRpcServiceGetTotalFavoritedResult()
}

func isFavoritedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteRpcServiceIsFavoritedArgs)
	realResult := result.(*favorite.FavoriteRpcServiceIsFavoritedResult)
	success, err := handler.(favorite.FavoriteRpcService).IsFavorited(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newFavoriteRpcServiceIsFavoritedArgs() interface{} {
	return favorite.NewFavoriteRpcServiceIsFavoritedArgs()
}

func newFavoriteRpcServiceIsFavoritedResult() interface{} {
	return favorite.NewFavoriteRpcServiceIsFavoritedResult()
}

func getFavorCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteRpcServiceGetFavorCountArgs)
	realResult := result.(*favorite.FavoriteRpcServiceGetFavorCountResult)
	success, err := handler.(favorite.FavoriteRpcService).GetFavorCount(ctx, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newFavoriteRpcServiceGetFavorCountArgs() interface{} {
	return favorite.NewFavoriteRpcServiceGetFavorCountArgs()
}

func newFavoriteRpcServiceGetFavorCountResult() interface{} {
	return favorite.NewFavoriteRpcServiceGetFavorCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *favorite.FavoriteActionReq) (r *favorite.FavoriteActionResp, err error) {
	var _args favorite.FavoriteRpcServiceFavoriteActionArgs
	_args.Req = req
	var _result favorite.FavoriteRpcServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *favorite.FavoriteListReq) (r *favorite.FavoriteListResp, err error) {
	var _args favorite.FavoriteRpcServiceGetFavoriteListArgs
	_args.Req = req
	var _result favorite.FavoriteRpcServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTotalFavorited(ctx context.Context, uid int64) (r int64, err error) {
	var _args favorite.FavoriteRpcServiceGetTotalFavoritedArgs
	_args.Uid = uid
	var _result favorite.FavoriteRpcServiceGetTotalFavoritedResult
	if err = p.c.Call(ctx, "GetTotalFavorited", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFavorited(ctx context.Context, req *favorite.CheckFavoritedReq) (r bool, err error) {
	var _args favorite.FavoriteRpcServiceIsFavoritedArgs
	_args.Req = req
	var _result favorite.FavoriteRpcServiceIsFavoritedResult
	if err = p.c.Call(ctx, "IsFavorited", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavorCount(ctx context.Context, uid int64) (r int64, err error) {
	var _args favorite.FavoriteRpcServiceGetFavorCountArgs
	_args.Uid = uid
	var _result favorite.FavoriteRpcServiceGetFavorCountResult
	if err = p.c.Call(ctx, "GetFavorCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
