// Code generated by hertz generator.

package api

import (
	api "api-gateway/biz/model/api"
	"api-gateway/rpc"
	"context"
	"io"
	"publish-service/kitex_gen/publish"
	"strings"
	"user-service/kitex_gen/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	fh, err := c.FormFile("data")
	if err != nil {
		panic(err)
	}
	f, err := fh.Open()
	if err != nil {
		panic(err)
	}
	data, err := io.ReadAll(f)
	if err != nil {
		panic(err)
	}

	title := c.FormValue("title")
	id := c.GetInt64("uid")
	if id == 0 {
		c.JSON(consts.StatusUnauthorized, &api.PublishActionResponse{
			StatusCode: -1,
			StatusMsg:  nil,
		})
	}
	s := strings.Split(fh.Filename, ".")
	_, err = rpc.PublishRPCClient.PublishAction(ctx, &publish.VideoData{
		Title:    string(title),
		Data:     data,
		Uid:      id,
		FileType: s[len(s)-1],
	})
	if err == nil {
		c.JSON(consts.StatusOK, &api.PublishActionResponse{
			StatusCode: 0,
			StatusMsg:  nil,
		})
	} else {
		c.JSON(consts.StatusInternalServerError, api.PublishActionResponse{
			StatusCode: 2,
			StatusMsg:  nil,
		})
	}

}

// GetPublishList .
// @router /douyin/publish/list/ [GET]
func GetPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	id := c.GetInt64("uid")
	pubRpcResp, err := rpc.PublishRPCClient.GetPublishLish(ctx, &publish.PublishListReq{
		UserId: req.UserID,
	})
	if err != nil {
		panic(err)
	}
	userRpcResp, err := rpc.UserRPCClient.GetUserInfo(ctx, &user.UserInfoReq{
		SendReqUserId: id,
		ReqUserId:     req.UserID,
	})
	if err != nil {
		panic(err)
	}
	resp := new(api.PublishListResponse)
	resp.StatusCode = 0
	resp.StatusMsg = nil
	resp.VideoList = make([]*api.Video, len(pubRpcResp.VideoList))
	userInfo := userRpcResp.UserInfo
	for idx, video := range pubRpcResp.VideoList {
		resp.VideoList[idx] = &api.Video{
			ID: video.Id,
			Author: &api.User{
				ID:              video.AuthorID,
				Name:            userInfo.Name,
				Avatar:          &userInfo.Avatar,
				BackgroundImage: &userInfo.BackgroundImage,
				FollowCount:     &userInfo.FollowCount,
				FollowerCount:   userInfo.FollowerCount,
				Signature:       &userInfo.Signature,
				IsFollow:        userInfo.IsFollow,
				WorkCount:       &userInfo.WorkCount,
				FaviriteCount:   &userInfo.FollowCount,
				TotalFavorited:  &userInfo.TotalFavorited,
			},
			PlayURL:  video.PlayUrl,
			CoverURL: video.CoverUrl,
			Title:    video.Title,
			//todo
			FavoriteCount: 0,
			CommentCount:  0,
			IsFavorite:    false,
		}
	}
	c.JSON(consts.StatusOK, resp)
}
