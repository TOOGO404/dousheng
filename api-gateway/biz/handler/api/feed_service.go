// Code generated by hertz generator.

package api

import (
	api "api-gateway/biz/model/api"
	"api-gateway/rpc"
	"context"
	"feed-service/kitex_gen/feed"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	"time"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		c.Abort()
		return
	}
	if req.LatestTime == nil {
		now := time.Now().Unix()
		req.LatestTime = &now
	}

	rpcResp, _ := rpc.FeedRPCClient.GetFeed(ctx, &feed.FeedReq{
		LatestTime: *req.LatestTime,
	})
	log.Printf("\nlen unix:%d\nlen post:%d", time.Now().Unix(), req.LatestTime)

	resp := new(api.FeedResponse)
	resp.StatusCode = 0
	resp.StatusMsg = nil
	log.Println(len(resp.VideoList))
	videos := make([]*api.Video, len(rpcResp.VideoList))
	for index, video := range rpcResp.VideoList {
		av := new(api.Video)

		av.ID = video.Id
		av.Title = video.Title
		av.Author = &api.User{
			ID: video.AuthorID,
		}
		av.PlayURL = video.PlayUrl
		av.CoverURL = video.CoverUrl
		av.IsFavorite = true
		av.CommentCount = 0
		av.FavoriteCount = 0
		videos[index] = av
	}
	resp.VideoList = videos
	c.JSON(consts.StatusOK, resp)
}
