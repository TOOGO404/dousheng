// Code generated by hertz generator.

package api

import (
	api "api-gateway/biz/model/api"
	"api-gateway/cache"
	"api-gateway/mw"
	"api-gateway/rpc"
	"context"
	"errors"
	"log"
	"net/http"
	"time"
	"user-service/kitex_gen/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/redis/go-redis/v9"
)

var signedTokenErr api.RegisterResponse
var existsTheSameEmailErr api.RegisterResponse

func init() {
	var fErrMsg = "获取token失败"
	signedTokenErr = api.RegisterResponse{
		StatusCode: -2,
		StatusMsg:  &fErrMsg,
		UserID:     0,
		Token:      "",
	}
	var eErrMsg = "存在相同的Email"
	existsTheSameEmailErr = api.RegisterResponse{
		StatusCode: -1,
		StatusMsg:  &eErrMsg,
		UserID:     0,
		Token:      "",
	}
}

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	rpcResp, err := rpc.UserRPCClient.UserRegister(ctx, &user.RegisterReq{
		Email: req.Email,
		Pwd:   req.Password,
	})
	if err != nil {
		c.JSON(consts.StatusOK, &existsTheSameEmailErr)
	}
	tokenStr, err := mw.SignedToken(rpcResp.Uid)

	if err != nil {
		c.JSON(consts.StatusOK, &signedTokenErr)
	} else {
		resp := new(api.RegisterResponse)
		resp.Token = tokenStr
		resp.UserID = rpcResp.Uid
		c.JSON(consts.StatusOK, resp)
	}
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		c.Abort()
		return
	}
	userKey := req.Username
	times, err := cache.RdsClient.Get(ctx, userKey).Int()
	if errors.Is(err, redis.Nil) {
		cache.RdsClient.Set(ctx, userKey, 0, time.Second*86400)
	} else if times > 2 {
		log.Println("连续输入错误密码次数超过限制")
		c.JSON(consts.StatusOK, utils.H{
			"status_code": -1,
			"status_msg":  "连续输入错误密码次数超过限制,请明天再试试",
			"user_id":     0,
			"token":       "",
		})
		return
	}
	rpcResp, err := rpc.UserRPCClient.UserLogin(ctx, &user.LoginReq{
		Email: req.Username,
		Pwd:   req.Password,
	})
	if err != nil {
		cache.RdsClient.Incr(ctx, userKey)
		c.JSON(consts.StatusOK, utils.H{
			"status_code": -2,
			"status_msg":  "密码错误",
			"user_id":     0,
			"token":       "",
		})
		return
	}
	cache.RdsClient.Del(ctx, userKey)
	resp := new(api.LoginResponse)
	tokenStr, _ := mw.SignedToken(rpcResp.Uid)
	resp.Token = tokenStr
	resp.StatusCode = 0
	resp.UserID = rpcResp.Uid
	resp.StatusMsg = nil
	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /douyin/user/ [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		c.Abort()
		return
	} else {
		_uid, exist := c.Keys["uid"]
		if !exist {
			c.JSON(http.StatusOK, utils.H{
				"status_code": 1,
				"status_msg":  "please login at first",
			})
		}
		uid := _uid.(int64)
		rpcResp, _ := rpc.UserRPCClient.GetUserInfo(ctx, &user.UserInfoReq{
			SendReqUserId: uid,
			ReqUserId:     req.UserID,
		})
		resp := new(api.UserInfoResponse)
		resp.StatusCode = 0

		resp.StatusMsg = nil
		//todo
		resp.User = &api.User{
			ID:              rpcResp.UserInfo.Id,
			Name:            rpcResp.UserInfo.Name,
			Avatar:          &rpcResp.UserInfo.Avatar,
			BackgroundImage: &rpcResp.UserInfo.BackgroundImage,
			Signature:       &rpcResp.UserInfo.Signature,
			FollowCount:     &rpcResp.UserInfo.FollowCount,
			FollowerCount:   rpcResp.UserInfo.FollowerCount,
			IsFollow:        rpcResp.UserInfo.IsFollow,
			FaviriteCount:   &rpcResp.UserInfo.FaviriteCount,
			WorkCount:       &rpcResp.UserInfo.WorkCount,
			TotalFavorited:  &rpcResp.UserInfo.TotalFavorited,
		}
		c.JSON(consts.StatusOK, resp)
	}
}
