// Code generated by Kitex v0.7.0. DO NOT EDIT.

package commentrpcservice

import (
	comment "comment-service/kitex_gen/comment"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentRpcServiceServiceInfo
}

var commentRpcServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentRpcService"
	handlerType := (*comment.CommentRpcService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CommentGet":    kitex.NewMethodInfo(commentGetHandler, newCommentRpcServiceCommentGetArgs, newCommentRpcServiceCommentGetResult, false),
		"CommentAction": kitex.NewMethodInfo(commentActionHandler, newCommentRpcServiceCommentActionArgs, newCommentRpcServiceCommentActionResult, false),
		"GetCommentCnt": kitex.NewMethodInfo(getCommentCntHandler, newCommentRpcServiceGetCommentCntArgs, newCommentRpcServiceGetCommentCntResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "comment",
		"ServiceFilePath": "../idl/comment.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func commentGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentRpcServiceCommentGetArgs)
	realResult := result.(*comment.CommentRpcServiceCommentGetResult)
	success, err := handler.(comment.CommentRpcService).CommentGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentRpcServiceCommentGetArgs() interface{} {
	return comment.NewCommentRpcServiceCommentGetArgs()
}

func newCommentRpcServiceCommentGetResult() interface{} {
	return comment.NewCommentRpcServiceCommentGetResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentRpcServiceCommentActionArgs)
	realResult := result.(*comment.CommentRpcServiceCommentActionResult)
	success, err := handler.(comment.CommentRpcService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentRpcServiceCommentActionArgs() interface{} {
	return comment.NewCommentRpcServiceCommentActionArgs()
}

func newCommentRpcServiceCommentActionResult() interface{} {
	return comment.NewCommentRpcServiceCommentActionResult()
}

func getCommentCntHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentRpcServiceGetCommentCntArgs)
	realResult := result.(*comment.CommentRpcServiceGetCommentCntResult)
	success, err := handler.(comment.CommentRpcService).GetCommentCnt(ctx, realArg.Vid)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newCommentRpcServiceGetCommentCntArgs() interface{} {
	return comment.NewCommentRpcServiceGetCommentCntArgs()
}

func newCommentRpcServiceGetCommentCntResult() interface{} {
	return comment.NewCommentRpcServiceGetCommentCntResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentGet(ctx context.Context, req *comment.CommentListRequest) (r *comment.CommentListResponse, err error) {
	var _args comment.CommentRpcServiceCommentGetArgs
	_args.Req = req
	var _result comment.CommentRpcServiceCommentGetResult
	if err = p.c.Call(ctx, "CommentGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *comment.CommentActionRequest) (r *comment.CommentActionResponse, err error) {
	var _args comment.CommentRpcServiceCommentActionArgs
	_args.Req = req
	var _result comment.CommentRpcServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentCnt(ctx context.Context, vid int64) (r int64, err error) {
	var _args comment.CommentRpcServiceGetCommentCntArgs
	_args.Vid = vid
	var _result comment.CommentRpcServiceGetCommentCntResult
	if err = p.c.Call(ctx, "GetCommentCnt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
