// Code generated by Kitex v0.7.0. DO NOT EDIT.

package relationshiprpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	relationship "relationship-service/kitex_gen/relationship"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Sub(ctx context.Context, req *relationship.SubActionReq, callOptions ...callopt.Option) (r bool, err error)
	CheckSub(ctx context.Context, req *relationship.CheckReq, callOptions ...callopt.Option) (r bool, err error)
	GetSubList(ctx context.Context, req *relationship.SubListReq, callOptions ...callopt.Option) (r *relationship.SubListResp, err error)
	GetFollowerList(ctx context.Context, req *relationship.FollowerListReq, callOptions ...callopt.Option) (r *relationship.FollowerListResp, err error)
	GetFollowCnt(ctx context.Context, uid int64, callOptions ...callopt.Option) (r int64, err error)
	GetFollowerCnt(ctx context.Context, uid int64, callOptions ...callopt.Option) (r int64, err error)
	GetFriendList(ctx context.Context, req *relationship.FriendlistReq, callOptions ...callopt.Option) (r *relationship.FriendlistResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRelationshipRpcServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRelationshipRpcServiceClient struct {
	*kClient
}

func (p *kRelationshipRpcServiceClient) Sub(ctx context.Context, req *relationship.SubActionReq, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Sub(ctx, req)
}

func (p *kRelationshipRpcServiceClient) CheckSub(ctx context.Context, req *relationship.CheckReq, callOptions ...callopt.Option) (r bool, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckSub(ctx, req)
}

func (p *kRelationshipRpcServiceClient) GetSubList(ctx context.Context, req *relationship.SubListReq, callOptions ...callopt.Option) (r *relationship.SubListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSubList(ctx, req)
}

func (p *kRelationshipRpcServiceClient) GetFollowerList(ctx context.Context, req *relationship.FollowerListReq, callOptions ...callopt.Option) (r *relationship.FollowerListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerList(ctx, req)
}

func (p *kRelationshipRpcServiceClient) GetFollowCnt(ctx context.Context, uid int64, callOptions ...callopt.Option) (r int64, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowCnt(ctx, uid)
}

func (p *kRelationshipRpcServiceClient) GetFollowerCnt(ctx context.Context, uid int64, callOptions ...callopt.Option) (r int64, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerCnt(ctx, uid)
}

func (p *kRelationshipRpcServiceClient) GetFriendList(ctx context.Context, req *relationship.FriendlistReq, callOptions ...callopt.Option) (r *relationship.FriendlistResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFriendList(ctx, req)
}
