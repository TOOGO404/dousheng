// Code generated by Kitex v0.7.0. DO NOT EDIT.

package relationshiprpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relationship "relationship-service/kitex_gen/relationship"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationshipRpcServiceServiceInfo
}

var relationshipRpcServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationshipRpcService"
	handlerType := (*relationship.RelationshipRpcService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Sub":             kitex.NewMethodInfo(subHandler, newRelationshipRpcServiceSubArgs, newRelationshipRpcServiceSubResult, false),
		"CheckSub":        kitex.NewMethodInfo(checkSubHandler, newRelationshipRpcServiceCheckSubArgs, newRelationshipRpcServiceCheckSubResult, false),
		"GetSubList":      kitex.NewMethodInfo(getSubListHandler, newRelationshipRpcServiceGetSubListArgs, newRelationshipRpcServiceGetSubListResult, false),
		"GetFollowerList": kitex.NewMethodInfo(getFollowerListHandler, newRelationshipRpcServiceGetFollowerListArgs, newRelationshipRpcServiceGetFollowerListResult, false),
		"GetFollowCnt":    kitex.NewMethodInfo(getFollowCntHandler, newRelationshipRpcServiceGetFollowCntArgs, newRelationshipRpcServiceGetFollowCntResult, false),
		"GetFollowerCnt":  kitex.NewMethodInfo(getFollowerCntHandler, newRelationshipRpcServiceGetFollowerCntArgs, newRelationshipRpcServiceGetFollowerCntResult, false),
		"GetFriendList":   kitex.NewMethodInfo(getFriendListHandler, newRelationshipRpcServiceGetFriendListArgs, newRelationshipRpcServiceGetFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "relationship",
		"ServiceFilePath": "../idl/relation.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceSubArgs)
	realResult := result.(*relationship.RelationshipRpcServiceSubResult)
	success, err := handler.(relationship.RelationshipRpcService).Sub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newRelationshipRpcServiceSubArgs() interface{} {
	return relationship.NewRelationshipRpcServiceSubArgs()
}

func newRelationshipRpcServiceSubResult() interface{} {
	return relationship.NewRelationshipRpcServiceSubResult()
}

func checkSubHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceCheckSubArgs)
	realResult := result.(*relationship.RelationshipRpcServiceCheckSubResult)
	success, err := handler.(relationship.RelationshipRpcService).CheckSub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newRelationshipRpcServiceCheckSubArgs() interface{} {
	return relationship.NewRelationshipRpcServiceCheckSubArgs()
}

func newRelationshipRpcServiceCheckSubResult() interface{} {
	return relationship.NewRelationshipRpcServiceCheckSubResult()
}

func getSubListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceGetSubListArgs)
	realResult := result.(*relationship.RelationshipRpcServiceGetSubListResult)
	success, err := handler.(relationship.RelationshipRpcService).GetSubList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationshipRpcServiceGetSubListArgs() interface{} {
	return relationship.NewRelationshipRpcServiceGetSubListArgs()
}

func newRelationshipRpcServiceGetSubListResult() interface{} {
	return relationship.NewRelationshipRpcServiceGetSubListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceGetFollowerListArgs)
	realResult := result.(*relationship.RelationshipRpcServiceGetFollowerListResult)
	success, err := handler.(relationship.RelationshipRpcService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationshipRpcServiceGetFollowerListArgs() interface{} {
	return relationship.NewRelationshipRpcServiceGetFollowerListArgs()
}

func newRelationshipRpcServiceGetFollowerListResult() interface{} {
	return relationship.NewRelationshipRpcServiceGetFollowerListResult()
}

func getFollowCntHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceGetFollowCntArgs)
	realResult := result.(*relationship.RelationshipRpcServiceGetFollowCntResult)
	success, err := handler.(relationship.RelationshipRpcService).GetFollowCnt(ctx, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newRelationshipRpcServiceGetFollowCntArgs() interface{} {
	return relationship.NewRelationshipRpcServiceGetFollowCntArgs()
}

func newRelationshipRpcServiceGetFollowCntResult() interface{} {
	return relationship.NewRelationshipRpcServiceGetFollowCntResult()
}

func getFollowerCntHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceGetFollowerCntArgs)
	realResult := result.(*relationship.RelationshipRpcServiceGetFollowerCntResult)
	success, err := handler.(relationship.RelationshipRpcService).GetFollowerCnt(ctx, realArg.Uid)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newRelationshipRpcServiceGetFollowerCntArgs() interface{} {
	return relationship.NewRelationshipRpcServiceGetFollowerCntArgs()
}

func newRelationshipRpcServiceGetFollowerCntResult() interface{} {
	return relationship.NewRelationshipRpcServiceGetFollowerCntResult()
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relationship.RelationshipRpcServiceGetFriendListArgs)
	realResult := result.(*relationship.RelationshipRpcServiceGetFriendListResult)
	success, err := handler.(relationship.RelationshipRpcService).GetFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationshipRpcServiceGetFriendListArgs() interface{} {
	return relationship.NewRelationshipRpcServiceGetFriendListArgs()
}

func newRelationshipRpcServiceGetFriendListResult() interface{} {
	return relationship.NewRelationshipRpcServiceGetFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Sub(ctx context.Context, req *relationship.SubActionReq) (r bool, err error) {
	var _args relationship.RelationshipRpcServiceSubArgs
	_args.Req = req
	var _result relationship.RelationshipRpcServiceSubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckSub(ctx context.Context, req *relationship.CheckReq) (r bool, err error) {
	var _args relationship.RelationshipRpcServiceCheckSubArgs
	_args.Req = req
	var _result relationship.RelationshipRpcServiceCheckSubResult
	if err = p.c.Call(ctx, "CheckSub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSubList(ctx context.Context, req *relationship.SubListReq) (r *relationship.SubListResp, err error) {
	var _args relationship.RelationshipRpcServiceGetSubListArgs
	_args.Req = req
	var _result relationship.RelationshipRpcServiceGetSubListResult
	if err = p.c.Call(ctx, "GetSubList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *relationship.FollowerListReq) (r *relationship.FollowerListResp, err error) {
	var _args relationship.RelationshipRpcServiceGetFollowerListArgs
	_args.Req = req
	var _result relationship.RelationshipRpcServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowCnt(ctx context.Context, uid int64) (r int64, err error) {
	var _args relationship.RelationshipRpcServiceGetFollowCntArgs
	_args.Uid = uid
	var _result relationship.RelationshipRpcServiceGetFollowCntResult
	if err = p.c.Call(ctx, "GetFollowCnt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerCnt(ctx context.Context, uid int64) (r int64, err error) {
	var _args relationship.RelationshipRpcServiceGetFollowerCntArgs
	_args.Uid = uid
	var _result relationship.RelationshipRpcServiceGetFollowerCntResult
	if err = p.c.Call(ctx, "GetFollowerCnt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, req *relationship.FriendlistReq) (r *relationship.FriendlistResp, err error) {
	var _args relationship.RelationshipRpcServiceGetFriendListArgs
	_args.Req = req
	var _result relationship.RelationshipRpcServiceGetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
