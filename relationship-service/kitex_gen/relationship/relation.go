// Code generated by thriftgo (0.3.0). DO NOT EDIT.

package relationship

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	Action_Sub = 1

	Action_Cancel = 2
)

type UserInfo struct {
	Id       int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Name     string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	IsFollow bool   `thrift:"is_follow,5,required" frugal:"5,required,bool" json:"is_follow"`
	Avatar   string `thrift:"avatar,6,required" frugal:"6,required,string" json:"avatar"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
	*p = UserInfo{}
}

func (p *UserInfo) GetId() (v int64) {
	return p.Id
}

func (p *UserInfo) GetName() (v string) {
	return p.Name
}

func (p *UserInfo) GetIsFollow() (v bool) {
	return p.IsFollow
}

func (p *UserInfo) GetAvatar() (v string) {
	return p.Avatar
}
func (p *UserInfo) SetId(val int64) {
	p.Id = val
}
func (p *UserInfo) SetName(val string) {
	p.Name = val
}
func (p *UserInfo) SetIsFollow(val bool) {
	p.IsFollow = val
}
func (p *UserInfo) SetAvatar(val string) {
	p.Avatar = val
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "id",
	2: "name",
	5: "is_follow",
	6: "avatar",
}

func (p *UserInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetIsFollow bool = false
	var issetAvatar bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsFollow = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvatar = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIsFollow {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAvatar {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserInfo[fieldId]))
}

func (p *UserInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UserInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UserInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFollow = v
	}
	return nil
}

func (p *UserInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_follow", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFollow); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UserInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsFollow) {
		return false
	}
	if !p.Field6DeepEqual(ano.Avatar) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field5DeepEqual(src bool) bool {

	if p.IsFollow != src {
		return false
	}
	return true
}
func (p *UserInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}

type SubActionReq struct {
	Who        int64 `thrift:"who,1,required" frugal:"1,required,i64" json:"who"`
	ToUserId   int64 `thrift:"to_user_id,2,required" frugal:"2,required,i64" json:"to_user_id"`
	ActionType int32 `thrift:"action_type,3,required" frugal:"3,required,i32" json:"action_type"`
}

func NewSubActionReq() *SubActionReq {
	return &SubActionReq{}
}

func (p *SubActionReq) InitDefault() {
	*p = SubActionReq{}
}

func (p *SubActionReq) GetWho() (v int64) {
	return p.Who
}

func (p *SubActionReq) GetToUserId() (v int64) {
	return p.ToUserId
}

func (p *SubActionReq) GetActionType() (v int32) {
	return p.ActionType
}
func (p *SubActionReq) SetWho(val int64) {
	p.Who = val
}
func (p *SubActionReq) SetToUserId(val int64) {
	p.ToUserId = val
}
func (p *SubActionReq) SetActionType(val int32) {
	p.ActionType = val
}

var fieldIDToName_SubActionReq = map[int16]string{
	1: "who",
	2: "to_user_id",
	3: "action_type",
}

func (p *SubActionReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWho bool = false
	var issetToUserId bool = false
	var issetActionType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWho = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetToUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetActionType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWho {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetToUserId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetActionType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubActionReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SubActionReq[fieldId]))
}

func (p *SubActionReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Who = v
	}
	return nil
}

func (p *SubActionReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToUserId = v
	}
	return nil
}

func (p *SubActionReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ActionType = v
	}
	return nil
}

func (p *SubActionReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubActionReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubActionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("who", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Who); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubActionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubActionReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("action_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ActionType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubActionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubActionReq(%+v)", *p)
}

func (p *SubActionReq) DeepEqual(ano *SubActionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Who) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ActionType) {
		return false
	}
	return true
}

func (p *SubActionReq) Field1DeepEqual(src int64) bool {

	if p.Who != src {
		return false
	}
	return true
}
func (p *SubActionReq) Field2DeepEqual(src int64) bool {

	if p.ToUserId != src {
		return false
	}
	return true
}
func (p *SubActionReq) Field3DeepEqual(src int32) bool {

	if p.ActionType != src {
		return false
	}
	return true
}

type SubListReq struct {
	Who int64 `thrift:"who,1,required" frugal:"1,required,i64" json:"who"`
}

func NewSubListReq() *SubListReq {
	return &SubListReq{}
}

func (p *SubListReq) InitDefault() {
	*p = SubListReq{}
}

func (p *SubListReq) GetWho() (v int64) {
	return p.Who
}
func (p *SubListReq) SetWho(val int64) {
	p.Who = val
}

var fieldIDToName_SubListReq = map[int16]string{
	1: "who",
}

func (p *SubListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWho bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWho = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWho {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SubListReq[fieldId]))
}

func (p *SubListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Who = v
	}
	return nil
}

func (p *SubListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("who", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Who); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubListReq(%+v)", *p)
}

func (p *SubListReq) DeepEqual(ano *SubListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Who) {
		return false
	}
	return true
}

func (p *SubListReq) Field1DeepEqual(src int64) bool {

	if p.Who != src {
		return false
	}
	return true
}

type SubListResp struct {
	FollowList []*UserInfo `thrift:"follow_list,1,optional" frugal:"1,optional,list<UserInfo>" json:"follow_list,omitempty"`
}

func NewSubListResp() *SubListResp {
	return &SubListResp{}
}

func (p *SubListResp) InitDefault() {
	*p = SubListResp{}
}

var SubListResp_FollowList_DEFAULT []*UserInfo

func (p *SubListResp) GetFollowList() (v []*UserInfo) {
	if !p.IsSetFollowList() {
		return SubListResp_FollowList_DEFAULT
	}
	return p.FollowList
}
func (p *SubListResp) SetFollowList(val []*UserInfo) {
	p.FollowList = val
}

var fieldIDToName_SubListResp = map[int16]string{
	1: "follow_list",
}

func (p *SubListResp) IsSetFollowList() bool {
	return p.FollowList != nil
}

func (p *SubListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.FollowList = make([]*UserInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewUserInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.FollowList = append(p.FollowList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SubListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFollowList() {
		if err = oprot.WriteFieldBegin("follow_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FollowList)); err != nil {
			return err
		}
		for _, v := range p.FollowList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubListResp(%+v)", *p)
}

func (p *SubListResp) DeepEqual(ano *SubListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FollowList) {
		return false
	}
	return true
}

func (p *SubListResp) Field1DeepEqual(src []*UserInfo) bool {

	if len(p.FollowList) != len(src) {
		return false
	}
	for i, v := range p.FollowList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FollowerListReq struct {
	Who int64 `thrift:"who,1,required" frugal:"1,required,i64" json:"who"`
}

func NewFollowerListReq() *FollowerListReq {
	return &FollowerListReq{}
}

func (p *FollowerListReq) InitDefault() {
	*p = FollowerListReq{}
}

func (p *FollowerListReq) GetWho() (v int64) {
	return p.Who
}
func (p *FollowerListReq) SetWho(val int64) {
	p.Who = val
}

var fieldIDToName_FollowerListReq = map[int16]string{
	1: "who",
}

func (p *FollowerListReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWho bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWho = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWho {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowerListReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FollowerListReq[fieldId]))
}

func (p *FollowerListReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Who = v
	}
	return nil
}

func (p *FollowerListReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FollowerListReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowerListReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("who", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Who); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowerListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowerListReq(%+v)", *p)
}

func (p *FollowerListReq) DeepEqual(ano *FollowerListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Who) {
		return false
	}
	return true
}

func (p *FollowerListReq) Field1DeepEqual(src int64) bool {

	if p.Who != src {
		return false
	}
	return true
}

type FollowerListResp struct {
	FollowerList []*UserInfo `thrift:"follower_list,1,optional" frugal:"1,optional,list<UserInfo>" json:"follower_list,omitempty"`
}

func NewFollowerListResp() *FollowerListResp {
	return &FollowerListResp{}
}

func (p *FollowerListResp) InitDefault() {
	*p = FollowerListResp{}
}

var FollowerListResp_FollowerList_DEFAULT []*UserInfo

func (p *FollowerListResp) GetFollowerList() (v []*UserInfo) {
	if !p.IsSetFollowerList() {
		return FollowerListResp_FollowerList_DEFAULT
	}
	return p.FollowerList
}
func (p *FollowerListResp) SetFollowerList(val []*UserInfo) {
	p.FollowerList = val
}

var fieldIDToName_FollowerListResp = map[int16]string{
	1: "follower_list",
}

func (p *FollowerListResp) IsSetFollowerList() bool {
	return p.FollowerList != nil
}

func (p *FollowerListResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FollowerListResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FollowerListResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.FollowerList = make([]*UserInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewUserInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.FollowerList = append(p.FollowerList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FollowerListResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FollowerListResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FollowerListResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFollowerList() {
		if err = oprot.WriteFieldBegin("follower_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FollowerList)); err != nil {
			return err
		}
		for _, v := range p.FollowerList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FollowerListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowerListResp(%+v)", *p)
}

func (p *FollowerListResp) DeepEqual(ano *FollowerListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FollowerList) {
		return false
	}
	return true
}

func (p *FollowerListResp) Field1DeepEqual(src []*UserInfo) bool {

	if len(p.FollowerList) != len(src) {
		return false
	}
	for i, v := range p.FollowerList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FriendlistReq struct {
	Who int64 `thrift:"who,1,required" frugal:"1,required,i64" json:"who"`
}

func NewFriendlistReq() *FriendlistReq {
	return &FriendlistReq{}
}

func (p *FriendlistReq) InitDefault() {
	*p = FriendlistReq{}
}

func (p *FriendlistReq) GetWho() (v int64) {
	return p.Who
}
func (p *FriendlistReq) SetWho(val int64) {
	p.Who = val
}

var fieldIDToName_FriendlistReq = map[int16]string{
	1: "who",
}

func (p *FriendlistReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWho bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWho = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWho {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FriendlistReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FriendlistReq[fieldId]))
}

func (p *FriendlistReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Who = v
	}
	return nil
}

func (p *FriendlistReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FriendlistReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FriendlistReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("who", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Who); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FriendlistReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendlistReq(%+v)", *p)
}

func (p *FriendlistReq) DeepEqual(ano *FriendlistReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Who) {
		return false
	}
	return true
}

func (p *FriendlistReq) Field1DeepEqual(src int64) bool {

	if p.Who != src {
		return false
	}
	return true
}

type FriendlistResp struct {
	FriendList []*UserInfo `thrift:"friend_list,1,optional" frugal:"1,optional,list<UserInfo>" json:"friend_list,omitempty"`
}

func NewFriendlistResp() *FriendlistResp {
	return &FriendlistResp{}
}

func (p *FriendlistResp) InitDefault() {
	*p = FriendlistResp{}
}

var FriendlistResp_FriendList_DEFAULT []*UserInfo

func (p *FriendlistResp) GetFriendList() (v []*UserInfo) {
	if !p.IsSetFriendList() {
		return FriendlistResp_FriendList_DEFAULT
	}
	return p.FriendList
}
func (p *FriendlistResp) SetFriendList(val []*UserInfo) {
	p.FriendList = val
}

var fieldIDToName_FriendlistResp = map[int16]string{
	1: "friend_list",
}

func (p *FriendlistResp) IsSetFriendList() bool {
	return p.FriendList != nil
}

func (p *FriendlistResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FriendlistResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FriendlistResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.FriendList = make([]*UserInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewUserInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.FriendList = append(p.FriendList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FriendlistResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FriendlistResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FriendlistResp) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFriendList() {
		if err = oprot.WriteFieldBegin("friend_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FriendList)); err != nil {
			return err
		}
		for _, v := range p.FriendList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FriendlistResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendlistResp(%+v)", *p)
}

func (p *FriendlistResp) DeepEqual(ano *FriendlistResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FriendList) {
		return false
	}
	return true
}

func (p *FriendlistResp) Field1DeepEqual(src []*UserInfo) bool {

	if len(p.FriendList) != len(src) {
		return false
	}
	for i, v := range p.FriendList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CheckReq struct {
	Who      int64 `thrift:"who,1,required" frugal:"1,required,i64" json:"who"`
	ToUserId int64 `thrift:"to_user_id,2,required" frugal:"2,required,i64" json:"to_user_id"`
}

func NewCheckReq() *CheckReq {
	return &CheckReq{}
}

func (p *CheckReq) InitDefault() {
	*p = CheckReq{}
}

func (p *CheckReq) GetWho() (v int64) {
	return p.Who
}

func (p *CheckReq) GetToUserId() (v int64) {
	return p.ToUserId
}
func (p *CheckReq) SetWho(val int64) {
	p.Who = val
}
func (p *CheckReq) SetToUserId(val int64) {
	p.ToUserId = val
}

var fieldIDToName_CheckReq = map[int16]string{
	1: "who",
	2: "to_user_id",
}

func (p *CheckReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWho bool = false
	var issetToUserId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWho = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetToUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWho {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetToUserId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CheckReq[fieldId]))
}

func (p *CheckReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Who = v
	}
	return nil
}

func (p *CheckReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToUserId = v
	}
	return nil
}

func (p *CheckReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("who", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Who); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckReq(%+v)", *p)
}

func (p *CheckReq) DeepEqual(ano *CheckReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Who) {
		return false
	}
	if !p.Field2DeepEqual(ano.ToUserId) {
		return false
	}
	return true
}

func (p *CheckReq) Field1DeepEqual(src int64) bool {

	if p.Who != src {
		return false
	}
	return true
}
func (p *CheckReq) Field2DeepEqual(src int64) bool {

	if p.ToUserId != src {
		return false
	}
	return true
}

type RelationshipRpcService interface {
	Sub(ctx context.Context, req *SubActionReq) (r bool, err error)

	CheckSub(ctx context.Context, req *CheckReq) (r bool, err error)

	GetSubList(ctx context.Context, req *SubListReq) (r *SubListResp, err error)

	GetFollowerList(ctx context.Context, req *FollowerListReq) (r *FollowerListResp, err error)

	GetFollowCnt(ctx context.Context, uid int64) (r int64, err error)

	GetFollowerCnt(ctx context.Context, uid int64) (r int64, err error)

	GetFriendList(ctx context.Context, req *FriendlistReq) (r *FriendlistResp, err error)
}

type RelationshipRpcServiceClient struct {
	c thrift.TClient
}

func NewRelationshipRpcServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RelationshipRpcServiceClient {
	return &RelationshipRpcServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRelationshipRpcServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RelationshipRpcServiceClient {
	return &RelationshipRpcServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRelationshipRpcServiceClient(c thrift.TClient) *RelationshipRpcServiceClient {
	return &RelationshipRpcServiceClient{
		c: c,
	}
}

func (p *RelationshipRpcServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *RelationshipRpcServiceClient) Sub(ctx context.Context, req *SubActionReq) (r bool, err error) {
	var _args RelationshipRpcServiceSubArgs
	_args.Req = req
	var _result RelationshipRpcServiceSubResult
	if err = p.Client_().Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RelationshipRpcServiceClient) CheckSub(ctx context.Context, req *CheckReq) (r bool, err error) {
	var _args RelationshipRpcServiceCheckSubArgs
	_args.Req = req
	var _result RelationshipRpcServiceCheckSubResult
	if err = p.Client_().Call(ctx, "CheckSub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RelationshipRpcServiceClient) GetSubList(ctx context.Context, req *SubListReq) (r *SubListResp, err error) {
	var _args RelationshipRpcServiceGetSubListArgs
	_args.Req = req
	var _result RelationshipRpcServiceGetSubListResult
	if err = p.Client_().Call(ctx, "GetSubList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RelationshipRpcServiceClient) GetFollowerList(ctx context.Context, req *FollowerListReq) (r *FollowerListResp, err error) {
	var _args RelationshipRpcServiceGetFollowerListArgs
	_args.Req = req
	var _result RelationshipRpcServiceGetFollowerListResult
	if err = p.Client_().Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RelationshipRpcServiceClient) GetFollowCnt(ctx context.Context, uid int64) (r int64, err error) {
	var _args RelationshipRpcServiceGetFollowCntArgs
	_args.Uid = uid
	var _result RelationshipRpcServiceGetFollowCntResult
	if err = p.Client_().Call(ctx, "GetFollowCnt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RelationshipRpcServiceClient) GetFollowerCnt(ctx context.Context, uid int64) (r int64, err error) {
	var _args RelationshipRpcServiceGetFollowerCntArgs
	_args.Uid = uid
	var _result RelationshipRpcServiceGetFollowerCntResult
	if err = p.Client_().Call(ctx, "GetFollowerCnt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *RelationshipRpcServiceClient) GetFriendList(ctx context.Context, req *FriendlistReq) (r *FriendlistResp, err error) {
	var _args RelationshipRpcServiceGetFriendListArgs
	_args.Req = req
	var _result RelationshipRpcServiceGetFriendListResult
	if err = p.Client_().Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type RelationshipRpcServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RelationshipRpcService
}

func (p *RelationshipRpcServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RelationshipRpcServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RelationshipRpcServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRelationshipRpcServiceProcessor(handler RelationshipRpcService) *RelationshipRpcServiceProcessor {
	self := &RelationshipRpcServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Sub", &relationshipRpcServiceProcessorSub{handler: handler})
	self.AddToProcessorMap("CheckSub", &relationshipRpcServiceProcessorCheckSub{handler: handler})
	self.AddToProcessorMap("GetSubList", &relationshipRpcServiceProcessorGetSubList{handler: handler})
	self.AddToProcessorMap("GetFollowerList", &relationshipRpcServiceProcessorGetFollowerList{handler: handler})
	self.AddToProcessorMap("GetFollowCnt", &relationshipRpcServiceProcessorGetFollowCnt{handler: handler})
	self.AddToProcessorMap("GetFollowerCnt", &relationshipRpcServiceProcessorGetFollowerCnt{handler: handler})
	self.AddToProcessorMap("GetFriendList", &relationshipRpcServiceProcessorGetFriendList{handler: handler})
	return self
}
func (p *RelationshipRpcServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type relationshipRpcServiceProcessorSub struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorSub) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceSubArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Sub", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceSubResult{}
	var retval bool
	if retval, err2 = p.handler.Sub(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Sub: "+err2.Error())
		oprot.WriteMessageBegin("Sub", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Sub", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type relationshipRpcServiceProcessorCheckSub struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorCheckSub) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceCheckSubArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckSub", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceCheckSubResult{}
	var retval bool
	if retval, err2 = p.handler.CheckSub(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckSub: "+err2.Error())
		oprot.WriteMessageBegin("CheckSub", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("CheckSub", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type relationshipRpcServiceProcessorGetSubList struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorGetSubList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceGetSubListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSubList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceGetSubListResult{}
	var retval *SubListResp
	if retval, err2 = p.handler.GetSubList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSubList: "+err2.Error())
		oprot.WriteMessageBegin("GetSubList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSubList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type relationshipRpcServiceProcessorGetFollowerList struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorGetFollowerList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceGetFollowerListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowerList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceGetFollowerListResult{}
	var retval *FollowerListResp
	if retval, err2 = p.handler.GetFollowerList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowerList: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowerList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowerList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type relationshipRpcServiceProcessorGetFollowCnt struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorGetFollowCnt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceGetFollowCntArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowCnt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceGetFollowCntResult{}
	var retval int64
	if retval, err2 = p.handler.GetFollowCnt(ctx, args.Uid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowCnt: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowCnt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowCnt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type relationshipRpcServiceProcessorGetFollowerCnt struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorGetFollowerCnt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceGetFollowerCntArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFollowerCnt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceGetFollowerCntResult{}
	var retval int64
	if retval, err2 = p.handler.GetFollowerCnt(ctx, args.Uid); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowerCnt: "+err2.Error())
		oprot.WriteMessageBegin("GetFollowerCnt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetFollowerCnt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type relationshipRpcServiceProcessorGetFriendList struct {
	handler RelationshipRpcService
}

func (p *relationshipRpcServiceProcessorGetFriendList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelationshipRpcServiceGetFriendListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetFriendList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := RelationshipRpcServiceGetFriendListResult{}
	var retval *FriendlistResp
	if retval, err2 = p.handler.GetFriendList(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFriendList: "+err2.Error())
		oprot.WriteMessageBegin("GetFriendList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetFriendList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type RelationshipRpcServiceSubArgs struct {
	Req *SubActionReq `thrift:"req,1" frugal:"1,default,SubActionReq" json:"req"`
}

func NewRelationshipRpcServiceSubArgs() *RelationshipRpcServiceSubArgs {
	return &RelationshipRpcServiceSubArgs{}
}

func (p *RelationshipRpcServiceSubArgs) InitDefault() {
	*p = RelationshipRpcServiceSubArgs{}
}

var RelationshipRpcServiceSubArgs_Req_DEFAULT *SubActionReq

func (p *RelationshipRpcServiceSubArgs) GetReq() (v *SubActionReq) {
	if !p.IsSetReq() {
		return RelationshipRpcServiceSubArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RelationshipRpcServiceSubArgs) SetReq(val *SubActionReq) {
	p.Req = val
}

var fieldIDToName_RelationshipRpcServiceSubArgs = map[int16]string{
	1: "req",
}

func (p *RelationshipRpcServiceSubArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationshipRpcServiceSubArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceSubArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceSubArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSubActionReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceSubArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Sub_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceSubArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceSubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceSubArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceSubArgs) DeepEqual(ano *RelationshipRpcServiceSubArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceSubArgs) Field1DeepEqual(src *SubActionReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceSubResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewRelationshipRpcServiceSubResult() *RelationshipRpcServiceSubResult {
	return &RelationshipRpcServiceSubResult{}
}

func (p *RelationshipRpcServiceSubResult) InitDefault() {
	*p = RelationshipRpcServiceSubResult{}
}

var RelationshipRpcServiceSubResult_Success_DEFAULT bool

func (p *RelationshipRpcServiceSubResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceSubResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RelationshipRpcServiceSubResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

var fieldIDToName_RelationshipRpcServiceSubResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceSubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceSubResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceSubResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceSubResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RelationshipRpcServiceSubResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Sub_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceSubResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceSubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceSubResult(%+v)", *p)
}

func (p *RelationshipRpcServiceSubResult) DeepEqual(ano *RelationshipRpcServiceSubResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceSubResult) Field0DeepEqual(src *bool) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type RelationshipRpcServiceCheckSubArgs struct {
	Req *CheckReq `thrift:"req,1" frugal:"1,default,CheckReq" json:"req"`
}

func NewRelationshipRpcServiceCheckSubArgs() *RelationshipRpcServiceCheckSubArgs {
	return &RelationshipRpcServiceCheckSubArgs{}
}

func (p *RelationshipRpcServiceCheckSubArgs) InitDefault() {
	*p = RelationshipRpcServiceCheckSubArgs{}
}

var RelationshipRpcServiceCheckSubArgs_Req_DEFAULT *CheckReq

func (p *RelationshipRpcServiceCheckSubArgs) GetReq() (v *CheckReq) {
	if !p.IsSetReq() {
		return RelationshipRpcServiceCheckSubArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RelationshipRpcServiceCheckSubArgs) SetReq(val *CheckReq) {
	p.Req = val
}

var fieldIDToName_RelationshipRpcServiceCheckSubArgs = map[int16]string{
	1: "req",
}

func (p *RelationshipRpcServiceCheckSubArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationshipRpcServiceCheckSubArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceCheckSubArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceCheckSubArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCheckReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceCheckSubArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckSub_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceCheckSubArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceCheckSubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceCheckSubArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceCheckSubArgs) DeepEqual(ano *RelationshipRpcServiceCheckSubArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceCheckSubArgs) Field1DeepEqual(src *CheckReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceCheckSubResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewRelationshipRpcServiceCheckSubResult() *RelationshipRpcServiceCheckSubResult {
	return &RelationshipRpcServiceCheckSubResult{}
}

func (p *RelationshipRpcServiceCheckSubResult) InitDefault() {
	*p = RelationshipRpcServiceCheckSubResult{}
}

var RelationshipRpcServiceCheckSubResult_Success_DEFAULT bool

func (p *RelationshipRpcServiceCheckSubResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceCheckSubResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RelationshipRpcServiceCheckSubResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

var fieldIDToName_RelationshipRpcServiceCheckSubResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceCheckSubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceCheckSubResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceCheckSubResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceCheckSubResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RelationshipRpcServiceCheckSubResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckSub_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceCheckSubResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceCheckSubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceCheckSubResult(%+v)", *p)
}

func (p *RelationshipRpcServiceCheckSubResult) DeepEqual(ano *RelationshipRpcServiceCheckSubResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceCheckSubResult) Field0DeepEqual(src *bool) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type RelationshipRpcServiceGetSubListArgs struct {
	Req *SubListReq `thrift:"req,1" frugal:"1,default,SubListReq" json:"req"`
}

func NewRelationshipRpcServiceGetSubListArgs() *RelationshipRpcServiceGetSubListArgs {
	return &RelationshipRpcServiceGetSubListArgs{}
}

func (p *RelationshipRpcServiceGetSubListArgs) InitDefault() {
	*p = RelationshipRpcServiceGetSubListArgs{}
}

var RelationshipRpcServiceGetSubListArgs_Req_DEFAULT *SubListReq

func (p *RelationshipRpcServiceGetSubListArgs) GetReq() (v *SubListReq) {
	if !p.IsSetReq() {
		return RelationshipRpcServiceGetSubListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RelationshipRpcServiceGetSubListArgs) SetReq(val *SubListReq) {
	p.Req = val
}

var fieldIDToName_RelationshipRpcServiceGetSubListArgs = map[int16]string{
	1: "req",
}

func (p *RelationshipRpcServiceGetSubListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationshipRpcServiceGetSubListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetSubListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetSubListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSubListReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceGetSubListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSubList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetSubListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetSubListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetSubListArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceGetSubListArgs) DeepEqual(ano *RelationshipRpcServiceGetSubListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetSubListArgs) Field1DeepEqual(src *SubListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceGetSubListResult struct {
	Success *SubListResp `thrift:"success,0,optional" frugal:"0,optional,SubListResp" json:"success,omitempty"`
}

func NewRelationshipRpcServiceGetSubListResult() *RelationshipRpcServiceGetSubListResult {
	return &RelationshipRpcServiceGetSubListResult{}
}

func (p *RelationshipRpcServiceGetSubListResult) InitDefault() {
	*p = RelationshipRpcServiceGetSubListResult{}
}

var RelationshipRpcServiceGetSubListResult_Success_DEFAULT *SubListResp

func (p *RelationshipRpcServiceGetSubListResult) GetSuccess() (v *SubListResp) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceGetSubListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RelationshipRpcServiceGetSubListResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubListResp)
}

var fieldIDToName_RelationshipRpcServiceGetSubListResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceGetSubListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceGetSubListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetSubListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetSubListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSubListResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceGetSubListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSubList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetSubListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetSubListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetSubListResult(%+v)", *p)
}

func (p *RelationshipRpcServiceGetSubListResult) DeepEqual(ano *RelationshipRpcServiceGetSubListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetSubListResult) Field0DeepEqual(src *SubListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFollowerListArgs struct {
	Req *FollowerListReq `thrift:"req,1" frugal:"1,default,FollowerListReq" json:"req"`
}

func NewRelationshipRpcServiceGetFollowerListArgs() *RelationshipRpcServiceGetFollowerListArgs {
	return &RelationshipRpcServiceGetFollowerListArgs{}
}

func (p *RelationshipRpcServiceGetFollowerListArgs) InitDefault() {
	*p = RelationshipRpcServiceGetFollowerListArgs{}
}

var RelationshipRpcServiceGetFollowerListArgs_Req_DEFAULT *FollowerListReq

func (p *RelationshipRpcServiceGetFollowerListArgs) GetReq() (v *FollowerListReq) {
	if !p.IsSetReq() {
		return RelationshipRpcServiceGetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RelationshipRpcServiceGetFollowerListArgs) SetReq(val *FollowerListReq) {
	p.Req = val
}

var fieldIDToName_RelationshipRpcServiceGetFollowerListArgs = map[int16]string{
	1: "req",
}

func (p *RelationshipRpcServiceGetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationshipRpcServiceGetFollowerListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFollowerListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewFollowerListReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceGetFollowerListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowerList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFollowerListArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFollowerListArgs) DeepEqual(ano *RelationshipRpcServiceGetFollowerListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFollowerListArgs) Field1DeepEqual(src *FollowerListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFollowerListResult struct {
	Success *FollowerListResp `thrift:"success,0,optional" frugal:"0,optional,FollowerListResp" json:"success,omitempty"`
}

func NewRelationshipRpcServiceGetFollowerListResult() *RelationshipRpcServiceGetFollowerListResult {
	return &RelationshipRpcServiceGetFollowerListResult{}
}

func (p *RelationshipRpcServiceGetFollowerListResult) InitDefault() {
	*p = RelationshipRpcServiceGetFollowerListResult{}
}

var RelationshipRpcServiceGetFollowerListResult_Success_DEFAULT *FollowerListResp

func (p *RelationshipRpcServiceGetFollowerListResult) GetSuccess() (v *FollowerListResp) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceGetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RelationshipRpcServiceGetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowerListResp)
}

var fieldIDToName_RelationshipRpcServiceGetFollowerListResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceGetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceGetFollowerListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFollowerListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewFollowerListResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceGetFollowerListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowerList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFollowerListResult(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFollowerListResult) DeepEqual(ano *RelationshipRpcServiceGetFollowerListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFollowerListResult) Field0DeepEqual(src *FollowerListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFollowCntArgs struct {
	Uid int64 `thrift:"uid,1" frugal:"1,default,i64" json:"uid"`
}

func NewRelationshipRpcServiceGetFollowCntArgs() *RelationshipRpcServiceGetFollowCntArgs {
	return &RelationshipRpcServiceGetFollowCntArgs{}
}

func (p *RelationshipRpcServiceGetFollowCntArgs) InitDefault() {
	*p = RelationshipRpcServiceGetFollowCntArgs{}
}

func (p *RelationshipRpcServiceGetFollowCntArgs) GetUid() (v int64) {
	return p.Uid
}
func (p *RelationshipRpcServiceGetFollowCntArgs) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_RelationshipRpcServiceGetFollowCntArgs = map[int16]string{
	1: "uid",
}

func (p *RelationshipRpcServiceGetFollowCntArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFollowCntArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowCntArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *RelationshipRpcServiceGetFollowCntArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowCnt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowCntArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowCntArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFollowCntArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFollowCntArgs) DeepEqual(ano *RelationshipRpcServiceGetFollowCntArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFollowCntArgs) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFollowCntResult struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewRelationshipRpcServiceGetFollowCntResult() *RelationshipRpcServiceGetFollowCntResult {
	return &RelationshipRpcServiceGetFollowCntResult{}
}

func (p *RelationshipRpcServiceGetFollowCntResult) InitDefault() {
	*p = RelationshipRpcServiceGetFollowCntResult{}
}

var RelationshipRpcServiceGetFollowCntResult_Success_DEFAULT int64

func (p *RelationshipRpcServiceGetFollowCntResult) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceGetFollowCntResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RelationshipRpcServiceGetFollowCntResult) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

var fieldIDToName_RelationshipRpcServiceGetFollowCntResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceGetFollowCntResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceGetFollowCntResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFollowCntResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowCntResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RelationshipRpcServiceGetFollowCntResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowCnt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowCntResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowCntResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFollowCntResult(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFollowCntResult) DeepEqual(ano *RelationshipRpcServiceGetFollowCntResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFollowCntResult) Field0DeepEqual(src *int64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFollowerCntArgs struct {
	Uid int64 `thrift:"uid,1" frugal:"1,default,i64" json:"uid"`
}

func NewRelationshipRpcServiceGetFollowerCntArgs() *RelationshipRpcServiceGetFollowerCntArgs {
	return &RelationshipRpcServiceGetFollowerCntArgs{}
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) InitDefault() {
	*p = RelationshipRpcServiceGetFollowerCntArgs{}
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) GetUid() (v int64) {
	return p.Uid
}
func (p *RelationshipRpcServiceGetFollowerCntArgs) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_RelationshipRpcServiceGetFollowerCntArgs = map[int16]string{
	1: "uid",
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFollowerCntArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowerCnt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFollowerCntArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) DeepEqual(ano *RelationshipRpcServiceGetFollowerCntArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFollowerCntArgs) Field1DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFollowerCntResult struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewRelationshipRpcServiceGetFollowerCntResult() *RelationshipRpcServiceGetFollowerCntResult {
	return &RelationshipRpcServiceGetFollowerCntResult{}
}

func (p *RelationshipRpcServiceGetFollowerCntResult) InitDefault() {
	*p = RelationshipRpcServiceGetFollowerCntResult{}
}

var RelationshipRpcServiceGetFollowerCntResult_Success_DEFAULT int64

func (p *RelationshipRpcServiceGetFollowerCntResult) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceGetFollowerCntResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *RelationshipRpcServiceGetFollowerCntResult) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

var fieldIDToName_RelationshipRpcServiceGetFollowerCntResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceGetFollowerCntResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceGetFollowerCntResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFollowerCntResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerCntResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RelationshipRpcServiceGetFollowerCntResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFollowerCnt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerCntResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFollowerCntResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFollowerCntResult(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFollowerCntResult) DeepEqual(ano *RelationshipRpcServiceGetFollowerCntResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFollowerCntResult) Field0DeepEqual(src *int64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFriendListArgs struct {
	Req *FriendlistReq `thrift:"req,1" frugal:"1,default,FriendlistReq" json:"req"`
}

func NewRelationshipRpcServiceGetFriendListArgs() *RelationshipRpcServiceGetFriendListArgs {
	return &RelationshipRpcServiceGetFriendListArgs{}
}

func (p *RelationshipRpcServiceGetFriendListArgs) InitDefault() {
	*p = RelationshipRpcServiceGetFriendListArgs{}
}

var RelationshipRpcServiceGetFriendListArgs_Req_DEFAULT *FriendlistReq

func (p *RelationshipRpcServiceGetFriendListArgs) GetReq() (v *FriendlistReq) {
	if !p.IsSetReq() {
		return RelationshipRpcServiceGetFriendListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RelationshipRpcServiceGetFriendListArgs) SetReq(val *FriendlistReq) {
	p.Req = val
}

var fieldIDToName_RelationshipRpcServiceGetFriendListArgs = map[int16]string{
	1: "req",
}

func (p *RelationshipRpcServiceGetFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationshipRpcServiceGetFriendListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFriendListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFriendListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewFriendlistReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceGetFriendListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFriendList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFriendListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFriendListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFriendListArgs(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFriendListArgs) DeepEqual(ano *RelationshipRpcServiceGetFriendListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFriendListArgs) Field1DeepEqual(src *FriendlistReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type RelationshipRpcServiceGetFriendListResult struct {
	Success *FriendlistResp `thrift:"success,0,optional" frugal:"0,optional,FriendlistResp" json:"success,omitempty"`
}

func NewRelationshipRpcServiceGetFriendListResult() *RelationshipRpcServiceGetFriendListResult {
	return &RelationshipRpcServiceGetFriendListResult{}
}

func (p *RelationshipRpcServiceGetFriendListResult) InitDefault() {
	*p = RelationshipRpcServiceGetFriendListResult{}
}

var RelationshipRpcServiceGetFriendListResult_Success_DEFAULT *FriendlistResp

func (p *RelationshipRpcServiceGetFriendListResult) GetSuccess() (v *FriendlistResp) {
	if !p.IsSetSuccess() {
		return RelationshipRpcServiceGetFriendListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RelationshipRpcServiceGetFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FriendlistResp)
}

var fieldIDToName_RelationshipRpcServiceGetFriendListResult = map[int16]string{
	0: "success",
}

func (p *RelationshipRpcServiceGetFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationshipRpcServiceGetFriendListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RelationshipRpcServiceGetFriendListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFriendListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewFriendlistResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RelationshipRpcServiceGetFriendListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetFriendList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFriendListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *RelationshipRpcServiceGetFriendListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipRpcServiceGetFriendListResult(%+v)", *p)
}

func (p *RelationshipRpcServiceGetFriendListResult) DeepEqual(ano *RelationshipRpcServiceGetFriendListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *RelationshipRpcServiceGetFriendListResult) Field0DeepEqual(src *FriendlistResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
