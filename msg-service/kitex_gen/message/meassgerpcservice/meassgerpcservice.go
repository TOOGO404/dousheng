// Code generated by Kitex v0.7.0. DO NOT EDIT.

package meassgerpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "msg-service/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return meassgeRpcServiceServiceInfo
}

var meassgeRpcServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MeassgeRpcService"
	handlerType := (*message.MeassgeRpcService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageAction":  kitex.NewMethodInfo(messageActionHandler, newMeassgeRpcServiceMessageActionArgs, newMeassgeRpcServiceMessageActionResult, false),
		"GetMessageChat": kitex.NewMethodInfo(getMessageChatHandler, newMeassgeRpcServiceGetMessageChatArgs, newMeassgeRpcServiceGetMessageChatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "message",
		"ServiceFilePath": "../idl/msg.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MeassgeRpcServiceMessageActionArgs)
	realResult := result.(*message.MeassgeRpcServiceMessageActionResult)
	success, err := handler.(message.MeassgeRpcService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newMeassgeRpcServiceMessageActionArgs() interface{} {
	return message.NewMeassgeRpcServiceMessageActionArgs()
}

func newMeassgeRpcServiceMessageActionResult() interface{} {
	return message.NewMeassgeRpcServiceMessageActionResult()
}

func getMessageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MeassgeRpcServiceGetMessageChatArgs)
	realResult := result.(*message.MeassgeRpcServiceGetMessageChatResult)
	success, err := handler.(message.MeassgeRpcService).GetMessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMeassgeRpcServiceGetMessageChatArgs() interface{} {
	return message.NewMeassgeRpcServiceGetMessageChatArgs()
}

func newMeassgeRpcServiceGetMessageChatResult() interface{} {
	return message.NewMeassgeRpcServiceGetMessageChatResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageAction(ctx context.Context, req *message.MessageActionReq) (r bool, err error) {
	var _args message.MeassgeRpcServiceMessageActionArgs
	_args.Req = req
	var _result message.MeassgeRpcServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageChat(ctx context.Context, req *message.MessageChatReq) (r *message.MessageChatResp, err error) {
	var _args message.MeassgeRpcServiceGetMessageChatArgs
	_args.Req = req
	var _result message.MeassgeRpcServiceGetMessageChatResult
	if err = p.c.Call(ctx, "GetMessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
