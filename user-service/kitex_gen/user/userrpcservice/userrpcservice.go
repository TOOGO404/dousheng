// Code generated by Kitex v0.6.1. DO NOT EDIT.

package userrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "user-service/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userRpcServiceServiceInfo
}

var userRpcServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserRpcService"
	handlerType := (*user.UserRpcService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister": kitex.NewMethodInfo(userRegisterHandler, newUserRpcServiceUserRegisterArgs, newUserRpcServiceUserRegisterResult, false),
		"UserLogin":    kitex.NewMethodInfo(userLoginHandler, newUserRpcServiceUserLoginArgs, newUserRpcServiceUserLoginResult, false),
		"GetUserInfo":  kitex.NewMethodInfo(getUserInfoHandler, newUserRpcServiceGetUserInfoArgs, newUserRpcServiceGetUserInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRpcServiceUserRegisterArgs)
	realResult := result.(*user.UserRpcServiceUserRegisterResult)
	success, err := handler.(user.UserRpcService).UserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRpcServiceUserRegisterArgs() interface{} {
	return user.NewUserRpcServiceUserRegisterArgs()
}

func newUserRpcServiceUserRegisterResult() interface{} {
	return user.NewUserRpcServiceUserRegisterResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRpcServiceUserLoginArgs)
	realResult := result.(*user.UserRpcServiceUserLoginResult)
	success, err := handler.(user.UserRpcService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRpcServiceUserLoginArgs() interface{} {
	return user.NewUserRpcServiceUserLoginArgs()
}

func newUserRpcServiceUserLoginResult() interface{} {
	return user.NewUserRpcServiceUserLoginResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRpcServiceGetUserInfoArgs)
	realResult := result.(*user.UserRpcServiceGetUserInfoResult)
	success, err := handler.(user.UserRpcService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRpcServiceGetUserInfoArgs() interface{} {
	return user.NewUserRpcServiceGetUserInfoArgs()
}

func newUserRpcServiceGetUserInfoResult() interface{} {
	return user.NewUserRpcServiceGetUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, req *user.RegisterReq) (r *user.RegisterResp, err error) {
	var _args user.UserRpcServiceUserRegisterArgs
	_args.Req = req
	var _result user.UserRpcServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *user.LoginReq) (r *user.LoginResp, err error) {
	var _args user.UserRpcServiceUserLoginArgs
	_args.Req = req
	var _result user.UserRpcServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, req *user.UserInfoReq) (r *user.UserInfoResp, err error) {
	var _args user.UserRpcServiceGetUserInfoArgs
	_args.Req = req
	var _result user.UserRpcServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
